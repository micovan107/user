// profile-overwrite.js
// D√πng thay cho ph·∫ßn script hi·ªán t·∫°i ƒë·ªÉ "ghi ƒë√®" n·ªôi dung #personInfo t·ª± ƒë·ªông

// L·∫•y id t·ª´ ?id=... ho·∫∑c l·∫•y slug cu·ªëi ƒë∆∞·ªùng d·∫´n n·∫øu c√≥
function getIdFromUrl() {
  const qs = new URLSearchParams(window.location.search);
  if (qs.get('id')) return qs.get('id');

  // l·∫•y slug cu·ªëi c√πng (v√≠ d·ª• /profile.html/Nguyen-Tien-Nam ho·∫∑c /profile/Nguyen-Tien-Nam)
  const parts = window.location.pathname.split('/').filter(Boolean);
  const last = parts[parts.length - 1] || '';
  // n·∫øu last ch·ª©a ".html" -> c√≥ th·ªÉ l√† "profile.html", l·∫•y tr∆∞·ªõc n√≥
  if (last.endsWith('.html')) {
    // n·∫øu url l√† /profile.html th√¨ d√πng query param only
    return qs.get('id') || '';
  }
  return decodeURIComponent(last);
}

function slugify(name) {
  if (!name) return '';
  return name.toString()
    .normalize('NFD').replace(/[\u0300-\u036f]/g, '') // b·ªè d·∫•u
    .toLowerCase()
    .trim()
    .replace(/[^a-z0-9\s-]/g, '') // b·ªè k√Ω t·ª± l·∫°
    .replace(/\s+/g, '-') // space -> -
    .replace(/-+/g,'-');
}

function setPrettyUrl(slug) {
  if (!slug) return;
  // gi·ªØ ph·∫ßn tr∆∞·ªõc (v√≠ d·ª• /profile.html) r·ªìi ƒë·ªïi th√†nh /profile.html/slug
  const path = window.location.pathname;
  // n·∫øu ƒë√£ c√≥ slug cu·ªëi r·ªìi th√¨ kh√¥ng ƒë·ªïi
  const parts = path.split('/');
  const last = parts[parts.length-1];
  if (last && last === slug) return;

  // t·∫°o new path: Â¶ÇÊûú file is profile.html -> append slug, else append slug
  let base = path;
  // n·∫øu ƒë∆∞·ªùng d·∫´n k·∫øt th√∫c b·∫±ng "/", trim
  if (base.endsWith('/')) base = base.slice(0, -1);

  // n·∫øu base last ch·ª©a ".html" (v√≠ d·ª• profile.html) -> append slug
  if (base.endsWith('.html')) {
    const newPath = base + '/' + encodeURIComponent(slug);
    history.replaceState(null, '', newPath + window.location.search);
  } else {
    // n·∫øu base already is folder, append slug
    const newPath = base + '/' + encodeURIComponent(slug);
    history.replaceState(null, '', newPath + window.location.search);
  }
}

// H√†m hi·ªÉn th·ªã template (ghi ƒë√® innerHTML)
function renderPerson(data) {
  const card = document.getElementById('personInfo');
  if (!card) return console.warn('Kh√¥ng t√¨m th·∫•y #personInfo tr√™n trang');

  if (!data) {
    document.title = 'Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng';
    card.innerHTML = `<p>‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y!</p>`;
    return;
  }

  const avatar = data.avatar || 'https://placehold.co/200';
  const name = data.name || 'Ng∆∞·ªùi d√πng ·∫©n danh';
  document.title = name; // ƒë·ªïi title

  // t·∫°o slug v√† c·∫≠p nh·∫≠t URL th√¢n thi·ªán
  const slug = slugify(name);
  if (slug) setPrettyUrl(slug);

  // template (ghi ƒë√®)
  card.innerHTML = `
    <img src="${avatar}" alt="Avatar">
    <h2>${escapeHtml(name)}</h2>
    <div class="info-section">
      <p><b>üéÇ Ng√†y sinh:</b> ${escapeHtml(data.dob || 'Ch∆∞a r√µ')}</p>
      <p><b>üìû SƒêT:</b> ${escapeHtml(data.phone || 'Kh√¥ng c√≥')}</p>
      <p><b>üíë T√¨nh tr·∫°ng:</b> ${escapeHtml(data.relationship || 'Ch∆∞a r√µ')}</p>
      <p><b>üè´ Tr∆∞·ªùng/N∆°i l√†m vi·ªác:</b> ${escapeHtml(data.school || 'Ch∆∞a r√µ')}</p>
      <p><b>üìö H·ªçc l·ª±c:</b> ${escapeHtml(data.studyPower || 'Ch∆∞a r√µ')}</p>

      <p><b>üè° N∆°i ·ªü hi·ªán t·∫°i:</b> ${escapeHtml(data.address || 'Ch∆∞a r√µ')}</p>

      <p><b>üß† NƒÉng l·ª±c:</b> ${escapeHtml(data.skills || 'Kh√¥ng c√≥')}</p>
      <p><b>üò® N·ªói s·ª£:</b> ${escapeHtml(data.fears || 'Kh√¥ng c√≥')}</p>
      <p><b>üéØ S·ªü th√≠ch:</b> ${escapeHtml(data.interests || 'Kh√¥ng c√≥')}</p>
                <p><b>üåê M·∫°ng x√£ h·ªôi:</b> ${
  data.webnet 
    ? `<a href="${escapeHtml(data.webnet)}" target="_blank" style="color:#4f46e5;">${escapeHtml(data.webnet)}</a>` 
    : 'Ch∆∞a c√≥'
}</p>
      <p><b>üìú Ti·ªÉu s·ª≠:</b> ${escapeHtml(data.bio || 'Ch∆∞a c√≥')}</p>
    </div>
    <a href="index.html" class="btn">‚¨Ö Quay l·∫°i trang ch·ªß</a>
    <button class="btn" id="toggleEditBtn">‚úçÔ∏è S·ª≠a th√¥ng tin</button>

    <div class="edit-form" id="editForm" style="display:none;">
      <label>H·ªç t√™n</label>
      <input id="editName" type="text" value="${escapeAttr(data.name || '')}">
      <label>Ng√†y sinh</label>
      <input id="editDob" type="date" value="${escapeAttr(data.dob || '')}">
      <label>S·ªë ƒëi·ªán tho·∫°i</label>
      <input id="editPhone" type="text" value="${escapeAttr(data.phone || '')}">
      <label>T√¨nh tr·∫°ng</label>
      <select id="editRelationship">
        <option ${data.relationship === 'ƒê·ªôc th√¢n' ? 'selected' : ''}>ƒê·ªôc th√¢n</option>
        <option ${data.relationship === 'C√≥ ng∆∞·ªùi y√™u' ? 'selected' : ''}>C√≥ ng∆∞·ªùi y√™u</option>
        <option ${data.relationship === 'Trong m·ªëi quan h·ªá' ? 'selected' : ''}>Trong m·ªëi quan h·ªá</option>
      </select>
      <label>Tr∆∞·ªùng/N∆°i l√†m vi·ªác</label>
      <input id="editSchool" type="text" value="${escapeAttr(data.school || '')}">
      <label>H·ªçc l·ª±c</label>
<select id="editStudyPower">
  <option value="">-- Ch·ªçn --</option>
  <option ${data.studyPower === 'Y·∫øu' ? 'selected' : ''}>Y·∫øu</option>
  <option ${data.studyPower === 'Trung b√¨nh' ? 'selected' : ''}>Trung b√¨nh</option>
  <option ${data.studyPower === 'Kh√°' ? 'selected' : ''}>Kh√°</option>
  <option ${data.studyPower === 'Gi·ªèi' ? 'selected' : ''}>Gi·ªèi</option>
  <option ${data.studyPower === 'Xu·∫•t s·∫Øc' ? 'selected' : ''}>Xu·∫•t s·∫Øc</option>
</select>
<label for="editAddress">N∆°i ·ªü hi·ªán t·∫°i</label>
<input type="text" id="editAddress" value="${escapeAttr(data.address || '')}">


      <label>NƒÉng l·ª±c</label>
      <input id="editSkills" type="text" value="${escapeAttr(data.skills || '')}">
      <label>N·ªói s·ª£</label>
      <input id="editFears" type="text" value="${escapeAttr(data.fears || '')}">

      <label>M·∫°ng x√£ h·ªôi</label>
<input id="editwebnet" type="text" value="${escapeAttr(data.webnet || '')}">

      <label>S·ªü th√≠ch</label>

 

      <input id="editInterests" type="text" value="${escapeAttr(data.interests || '')}">
      <label>Ti·ªÉu s·ª≠</label>
      <textarea id="editBio" rows="3">${escapeHtml(data.bio || '')}</textarea>
      <button class="btn" style="margin-top:10px;" id="saveBtn">L∆∞u</button>
    </div>
  `;

  // x·ª≠ l√Ω n√∫t s·ª≠a/l∆∞u
  document.getElementById('toggleEditBtn').addEventListener('click', () => {
    const f = document.getElementById('editForm');
    f.style.display = f.style.display === 'block' ? 'none' : 'block';
  });

  document.getElementById('saveBtn').addEventListener('click', () => {
    const updated = {
      name: document.getElementById('editName').value,
      dob: document.getElementById('editDob').value,
      phone: document.getElementById('editPhone').value,
      relationship: document.getElementById('editRelationship').value,
      school: document.getElementById('editSchool').value,
      skills: document.getElementById('editSkills').value,
      fears: document.getElementById('editFears').value,
      interests: document.getElementById('editInterests').value,
        webnet: document.getElementById('editwebnet').value, 
studyPower: document.getElementById('editStudyPower').value,
address: document.getElementById('editAddress').value,


      bio: document.getElementById('editBio').value
    };
    // ghi l√™n Firebase
    if (currentId) {
      firebase.database().ref('people/' + currentId).update(updated)
        .then(() => {
          alert('‚úÖ C·∫≠p nh·∫≠t th√†nh c√¥ng!');
          // c·∫≠p nh·∫≠t l·∫°i giao di·ªán (ghi ƒë√® l·∫°i)
          renderPerson(updated);
        })
        .catch(err => {
          console.error(err);
          alert('L·ªói khi l∆∞u: ' + (err.message || err));
        });
    } else {
      alert('Kh√¥ng x√°c ƒë·ªãnh ID ƒë·ªÉ l∆∞u.');
    }
  });
}

// escape ƒë·ªÉ tr√°nh XSS khi ƒë∆∞a v√†o HTML
function escapeHtml(str) {
  if (typeof str !== 'string') return str;
  return str.replace(/[&<>"']/g, (m) => ({
    '&':'&amp;', '<':'&lt;', '>':'&gt;', '"':'&quot;', "'":'&#39;'
  }[m]));
}
function escapeAttr(s) { return escapeHtml(s).replace(/"/g, '&quot;'); }

let currentId = getIdFromUrl();

if (!currentId) {
  // n·∫øu ko c√≥ id, hi·ªÉn th·ªã th√¥ng b√°o
  const card = document.getElementById('personInfo');
  if (card) card.innerHTML = '<p>Vui l√≤ng m·ªü trang v·ªõi ?id=ID_nguoi or /slug-name</p>';
} else {
  // l·∫•y d·ªØ li·ªáu t·ª´ Firebase (y√™u c·∫ßu config.js ƒë√£ load v√† firebase ƒë√£ init)
  const dbRef = firebase.database().ref('people/' + currentId);
  dbRef.once('value').then(snapshot => {
    const data = snapshot.val();
    if (!data) {
      // n·∫øu kh√¥ng t√¨m theo id, th·ª≠ t√¨m theo slug (tr∆∞·ªùng name normalised)
      const slugFromUrl = currentId;
      if (slugFromUrl) {
        // th·ª≠ qu√©t to√†n b·ªô people ƒë·ªÉ match slug c·ªßa name (ch·∫≠m v·ªõi nhi·ªÅu user)
        firebase.database().ref('people').once('value').then(snapAll => {
          const all = snapAll.val() || {};
          let foundId = null, foundData = null;
          for (const k in all) {
            if (slugify(all[k].name) === slugFromUrl) {
              foundId = k; foundData = all[k]; break;
            }
          }
          if (foundData) {
            currentId = foundId;
            renderPerson(foundData);
          } else {
            document.getElementById('personInfo').innerHTML = '<p>‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y!</p>';
            document.title = 'Kh√¥ng t√¨m th·∫•y';
          }
        });
      } else {
        document.getElementById('personInfo').innerHTML = '<p>‚ùå Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi n√†y!</p>';
        document.title = 'Kh√¥ng t√¨m th·∫•y';
      }
    } else {
      renderPerson(data);
    }
  }).catch(err => {
    console.error(err);
    const card = document.getElementById('personInfo');
    if (card) card.innerHTML = '<p>L·ªói khi t·∫£i d·ªØ li·ªáu.</p>';
  });
}
